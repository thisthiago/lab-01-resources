{"paragraphs":[{"title":"Configuração Inicial","text":"%pyspark\r\nfrom pyspark.sql import SparkSession\r\nfrom pyspark.sql.functions import *\r\nfrom pyspark.sql.types import *\r\n\r\n# Configuração do Spark\r\nspark = SparkSession.builder \\\r\n    .appName(\"Barbearia-Lab-PySpark\") \\\r\n    .getOrCreate()\r\n\r\n# Conexão com o PostgreSQL\r\ndb_url = \"jdbc:postgresql://postgres:5432/barbearia_db\"\r\nproperties = {\r\n    \"user\": \"admin\",\r\n    \"password\": \"senhasegura\",\r\n    \"driver\": \"org.postgresql.Driver\"\r\n}","user":"anonymous","dateUpdated":"2025-04-03T01:10:31+0000","progress":0,"config":{"colWidth":12,"fontSize":9,"title":true,"results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1743642446555_994809840","id":"paragraph_1743642446555_994809840","dateCreated":"2025-04-03T01:07:26+0000","status":"FINISHED","focus":false,"dateFinished":"2025-04-03T01:10:31+0000","dateStarted":"2025-04-03T01:10:31+0000","results":{"code":"SUCCESS","msg":[]}},{"title":"Configuração Inicial com MinIO","text":"%pyspark\n# 1. Configuração ESSENCIAL para MinIO\nfrom pyspark.sql import SparkSession\n\n# Encerrar qualquer sessão existente (importante!)\nspark.stop()\n\n# Criar nova sessão com todas as configurações necessárias\nspark = SparkSession.builder \\\n    .appName(\"MinIO-Access-Fix\") \\\n    .config(\"spark.hadoop.fs.s3a.endpoint\", \"http://minio:9000\") \\\n    .config(\"spark.hadoop.fs.s3a.access.key\", \"admin\") \\\n    .config(\"spark.hadoop.fs.s3a.secret.key\", \"senhasegura\") \\\n    .config(\"spark.hadoop.fs.s3a.path.style.access\", \"true\") \\\n    .config(\"spark.hadoop.fs.s3a.impl\", \"org.apache.hadoop.fs.s3a.S3AFileSystem\") \\\n    .config(\"spark.hadoop.fs.s3a.connection.ssl.enabled\", \"false\") \\\n    .config(\"spark.hadoop.fs.s3a.aws.credentials.provider\", \"org.apache.hadoop.fs.s3a.SimpleAWSCredentialsProvider\") \\\n    .config(\"spark.hadoop.fs.s3a.credentials.provider\", \"org.apache.hadoop.fs.s3a.SimpleAWSCredentialsProvider\") \\\n    .config(\"spark.hadoop.fs.s3a.impl.disable.cache\", \"true\") \\\n    .config(\"spark.jars.packages\", \"org.apache.hadoop:hadoop-aws:3.3.4,com.amazonaws:aws-java-sdk-bundle:1.12.262\") \\\n    .getOrCreate()\n\n# 2. Configuração adicional para garantir autenticação\nhadoop_conf = spark.sparkContext._jsc.hadoopConfiguration()\nhadoop_conf.set(\"fs.s3a.access.key\", \"admin\")\nhadoop_conf.set(\"fs.s3a.secret.key\", \"senhasegura\")\nhadoop_conf.set(\"fs.s3a.aws.credentials.provider\", \"org.apache.hadoop.fs.s3a.SimpleAWSCredentialsProvider\")\n\n# 3. Verificação EXTRA das configurações\nprint(\"\\nVerificação EXTRA das configurações:\")\nprint(\"Endpoint:\", hadoop_conf.get(\"fs.s3a.endpoint\"))\nprint(\"Access Key:\", hadoop_conf.get(\"fs.s3a.access.key\"))\nprint(\"Secret Key:\", hadoop_conf.get(\"fs.s3a.secret.key\"))\nprint(\"Credentials Provider:\", hadoop_conf.get(\"fs.s3a.aws.credentials.provider\"))\n\n# 4. Teste DIRETO via API Hadoop\ntry:\n    print(\"\\nTestando conexão via API Hadoop...\")\n    URI = spark.sparkContext._jvm.java.net.URI\n    Path = spark.sparkContext._jvm.org.apache.hadoop.fs.Path\n    FileSystem = spark.sparkContext._jvm.org.apache.hadoop.fs.FileSystem\n    \n    fs = FileSystem.get(URI.create(\"s3a://raw-bucket\"), hadoop_conf)\n    status = fs.listStatus(Path(\"/\"))\n    print(f\"\\nConexão bem-sucedida! Encontrados {len(status)} itens no bucket raiz\")\n    \n    # Leitura dos dados\n    print(\"\\nLendo dados específicos...\")\n    df = spark.read.parquet(\"s3a://raw-bucket/teste/\")\n    print(\"Leitura concluída com sucesso!\")\n    df.printSchema()\n    df.show()\n    \nexcept Exception as e:\n    print(\"\\nFalha na conexão:\")\n    print(\"Tipo:\", type(e))\n    print(\"Mensagem:\", str(e))\n    \n    # Diagnóstico avançado\n    print(\"\\nDIAGNÓSTICO AVANÇADO:\")\n    print(\"1. Execute no container Zeppelin: aws --endpoint-url http://minio:9000 s3 ls s3://raw-bucket/\")\n    print(\"2. Verifique os logs do MinIO: docker logs minio\")\n    print(\"3. Confira se o bucket existe: docker exec minio mc ls local/raw-bucket\")\n    print(\"4. Verifique as políticas: docker exec minio mc policy list local/raw-bucket\")\n    \n    raise e","user":"anonymous","dateUpdated":"2025-04-03T01:10:01+0000","progress":0,"config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1743642568903_1801046846","id":"paragraph_1743642568903_1801046846","dateCreated":"2025-04-03T01:09:28+0000","status":"READY","focus":false,"results":{}},{"text":"%pyspark\n# Criando views temporárias\ndf_clientes.createOrReplaceTempView(\"clientes\")\ndf_agendamentos.createOrReplaceTempView(\"agendamentos\")\n\n# View global (disponível para todas sessões)\ndf_servicos.createGlobalTempView(\"servicos_globais\")\n\n# Criando tabela persistente (Hive Metastore)\nspark.sql(f\"\"\"\nCREATE TABLE IF NOT EXISTS clientes_persistentes\nUSING org.apache.spark.sql.jdbc\nOPTIONS (\n    url \"jdbc:postgresql://postgres:5432/barbearia_db\",\n    dbtable \"cliente\",\n    user \"admin\",\n    password \"senhasegura\"\n)\n\"\"\")\n\nspark.sql(f\"\"\"\nCREATE TABLE IF NOT EXISTS pagamentos\nUSING org.apache.spark.sql.jdbc\nOPTIONS (\n    url \"jdbc:postgresql://postgres:5432/barbearia_db\",\n    dbtable \"pagamento\",\n    user \"admin\",\n    password \"senhasegura\"\n)\n\"\"\")","user":"anonymous","dateUpdated":"2025-04-03T01:17:55+0000","progress":0,"config":{"colWidth":12,"fontSize":9,"title":true,"results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1743642603072_1925566784","id":"paragraph_1743642603072_1925566784","dateCreated":"2025-04-03T01:10:03+0000","status":"FINISHED","focus":false,"dateFinished":"2025-04-03T01:17:47+0000","dateStarted":"2025-04-03T01:17:47+0000","title":"Criando e Manipulando Tabelas","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"DataFrame[]\n"}]}},{"text":"%pyspark\n# Consulta básica\nresultado = spark.sql(\"\"\"\nSELECT nome, telefone \nFROM clientes \nWHERE ativo = true\nLIMIT 10\n\"\"\")\nresultado.show()\n\n# Equivalente DataFrame API\ndf_clientes.select(\"nome\", \"telefone\").filter(\"ativo = true\").limit(10).show()","user":"anonymous","dateUpdated":"2025-04-03T01:12:22+0000","progress":0,"config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1743642647492_1186012793","id":"paragraph_1743642647492_1186012793","dateCreated":"2025-04-03T01:10:47+0000","status":"FINISHED","dateFinished":"2025-04-03T01:12:22+0000","dateStarted":"2025-04-03T01:12:22+0000","title":"Executando Consultas SQL","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------------------+-------------+\n|                nome|     telefone|\n+--------------------+-------------+\n|  Prof. Liam Martins|(11) 941-7035|\n|Guilherme Rodrigu...|(11) 951-5355|\n|João Pedro Costel...|(11) 969-5361|\n|Isaque Pereira Si...|(11) 950-3473|\n|      Danilo Sampaio|(11) 953-2267|\n|           Rael Leão|(11) 973-8946|\n|        João Cardoso|(11) 950-3731|\n|    Matheus Ferreira|(11) 913-1834|\n|Luiz Otávio Silva...|(11) 972-4966|\n|  Rael Aragão Araújo|(11) 917-9814|\n+--------------------+-------------+\n\n+--------------------+-------------+\n|                nome|     telefone|\n+--------------------+-------------+\n|  Prof. Liam Martins|(11) 941-7035|\n|Guilherme Rodrigu...|(11) 951-5355|\n|João Pedro Costel...|(11) 969-5361|\n|Isaque Pereira Si...|(11) 950-3473|\n|      Danilo Sampaio|(11) 953-2267|\n|           Rael Leão|(11) 973-8946|\n|        João Cardoso|(11) 950-3731|\n|    Matheus Ferreira|(11) 913-1834|\n|Luiz Otávio Silva...|(11) 972-4966|\n|  Rael Aragão Araújo|(11) 917-9814|\n+--------------------+-------------+\n\n"}]},"focus":false},{"text":"%pyspark\nprint(\"Agregação\")\nspark.sql(\"\"\"\nSELECT \n    COUNT(*) as total_clientes,\n    AVG(EXTRACT(YEAR FROM CURRENT_DATE) - EXTRACT(YEAR FROM data_nascimento)) as idade_media,\n    MAX(data_cadastro) as ultimo_cadastro\nFROM clientes\nWHERE ativo = true\n\"\"\").show()\n\nprint(\"Strings e Datas\")\nspark.sql(\"\"\"\nSELECT \n    nome,\n    UPPER(nome) as nome_maiusculo,\n    CONCAT(SUBSTRING(telefone, 1, 5), '****-****') as telefone_mascarado,\n    DATEDIFF(CURRENT_DATE, data_cadastro) as dias_cadastrado\nFROM clientes\n\"\"\").show()\n\nprint(\"Joins\")\nspark.sql(\"\"\"\nSELECT \n    c.nome as cliente,\n    s.nome as servico,\n    a.data_hora,\n    CASE \n        WHEN a.status = 'concluido' THEN 'Finalizado'\n        WHEN a.status = 'confirmado' THEN 'Agendado'\n        ELSE 'Cancelado'\n    END as status_formatado\nFROM agendamentos a\nJOIN clientes c ON a.cliente_id = c.cliente_id\nJOIN global_temp.servicos_globais s ON a.servico_id = s.servico_id\nWHERE a.data_hora BETWEEN '2024-01-01' AND '2024-12-31'\n\"\"\").show()","user":"anonymous","dateUpdated":"2025-04-03T01:16:38+0000","progress":0,"config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1743642742437_256870506","id":"paragraph_1743642742437_256870506","dateCreated":"2025-04-03T01:12:22+0000","status":"FINISHED","dateFinished":"2025-04-03T01:16:39+0000","dateStarted":"2025-04-03T01:16:38+0000","title":"Funções SQL no Spark","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Agregação\n+--------------+------------------+--------------------+\n|total_clientes|       idade_media|     ultimo_cadastro|\n+--------------+------------------+--------------------+\n|           454|48.947136563876654|2025-03-31 19:37:...|\n+--------------+------------------+--------------------+\n\nStrings e Datas\n+--------------------+--------------------+------------------+---------------+\n|                nome|      nome_maiusculo|telefone_mascarado|dias_cadastrado|\n+--------------------+--------------------+------------------+---------------+\n|  Prof. Liam Martins|  PROF. LIAM MARTINS|    (11) ****-****|           1337|\n|Guilherme Rodrigu...|GUILHERME RODRIGU...|    (11) ****-****|           1279|\n|João Pedro Costel...|JOÃO PEDRO COSTEL...|    (11) ****-****|            153|\n|Isaque Pereira Si...|ISAQUE PEREIRA SI...|    (11) ****-****|            377|\n|      Danilo Sampaio|      DANILO SAMPAIO|    (11) ****-****|            955|\n|           Rael Leão|           RAEL LEÃO|    (11) ****-****|           1144|\n|        João Cardoso|        JOÃO CARDOSO|    (11) ****-****|            996|\n|    Matheus Ferreira|    MATHEUS FERREIRA|    (11) ****-****|           1396|\n|Luiz Otávio Silva...|LUIZ OTÁVIO SILVA...|    (11) ****-****|           1690|\n|  Rael Aragão Araújo|  RAEL ARAGÃO ARAÚJO|    (11) ****-****|           1219|\n|  Davi Luiz da Costa|  DAVI LUIZ DA COSTA|    (11) ****-****|            329|\n|Isabel Teixeira B...|ISABEL TEIXEIRA B...|    (11) ****-****|           1748|\n|  Maria Clara Novaes|  MARIA CLARA NOVAES|    (11) ****-****|           1462|\n|Benício Carvalho ...|BENÍCIO CARVALHO ...|    (11) ****-****|             91|\n|Emanuel Fonseca F...|EMANUEL FONSECA F...|    (11) ****-****|            877|\n|Rafael Araújo Fer...|RAFAEL ARAÚJO FER...|    (11) ****-****|            399|\n|Maria Fernanda Me...|MARIA FERNANDA ME...|    (11) ****-****|            838|\n|José Miguel Novai...|JOSÉ MIGUEL NOVAI...|    (11) ****-****|            359|\n|Caroline Rocha Filho|CAROLINE ROCHA FILHO|    (11) ****-****|            945|\n|Arthur Gabriel Costa|ARTHUR GABRIEL COSTA|    (11) ****-****|           1395|\n+--------------------+--------------------+------------------+---------------+\nonly showing top 20 rows\n\nJoins\n+--------------------+------------+-------------------+----------------+\n|             cliente|     servico|          data_hora|status_formatado|\n+--------------------+------------+-------------------+----------------+\n|Arthur Miguel Nog...|Corte Social|2024-02-10 09:15:00|        Agendado|\n|       Caleb Sampaio|Corte Social|2024-02-29 14:00:00|      Finalizado|\n|       Caleb Sampaio|Corte Social|2024-03-01 13:00:00|        Agendado|\n|       Caleb Sampaio|Corte Social|2024-05-03 12:45:00|        Agendado|\n|       Caleb Sampaio|Corte Social|2024-07-05 12:00:00|        Agendado|\n|Arthur Miguel Nog...|Corte Social|2024-09-06 10:30:00|        Agendado|\n|       Caleb Sampaio|Corte Social|2024-12-02 15:00:00|        Agendado|\n|  Davi Lucca Moreira|Corte Social|2024-01-04 10:00:00|        Agendado|\n|        Caio Fonseca|Corte Social|2024-01-11 16:45:00|        Agendado|\n|        Caio Fonseca|Corte Social|2024-01-19 15:45:00|        Agendado|\n|  Davi Lucca Moreira|Corte Social|2024-01-20 14:00:00|        Agendado|\n|  Davi Lucca Moreira|Corte Social|2024-02-27 13:45:00|        Agendado|\n|  Davi Lucca Moreira|Corte Social|2024-03-25 14:15:00|        Agendado|\n|João Pedro Costel...|Corte Social|2024-03-30 14:00:00|        Agendado|\n|  Davi Lucca Moreira|Corte Social|2024-04-19 14:30:00|      Finalizado|\n|    Leonardo Pacheco|Corte Social|2024-06-15 12:00:00|        Agendado|\n|João Pedro Costel...|Corte Social|2024-07-09 10:30:00|        Agendado|\n|João Pedro Costel...|Corte Social|2024-07-22 15:30:00|        Agendado|\n|    Leonardo Pacheco|Corte Social|2024-07-27 12:15:00|        Agendado|\n|Aurora Martins Fe...|Corte Social|2024-08-02 10:15:00|        Agendado|\n+--------------------+------------+-------------------+----------------+\nonly showing top 20 rows\n\n"}]},"focus":false},{"text":"%pyspark\n# Salvando como tabela gerenciada\nspark.sql(\"\"\"\nCREATE TABLE relatorio_mensal\nUSING parquet\nAS\nSELECT \n    MONTH(data_hora) as mes,\n    COUNT(*) as total_agendamentos,\n    SUM(valor_total) as receita_total\nFROM agendamentos a\nJOIN pagamentos p ON a.agendamento_id = p.agendamento_id\nWHERE YEAR(data_hora) = 2024\nGROUP BY MONTH(data_hora)\n\"\"\")\n\n# 10.2 Exportando para CSV (versão corrigida)\n# Primeiro criamos um DataFrame com a consulta\ndf_relatorio = spark.sql(\"SELECT * FROM relatorio_mensal\")\n\n# Depois salvamos usando DataFrameWriter\n(df_relatorio.write\n    .format(\"csv\")\n    .option(\"header\", \"true\")\n    .mode(\"overwrite\")\n    .save(\"relatorio_mensal\"))","user":"anonymous","dateUpdated":"2025-04-03T01:20:36+0000","progress":0,"config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1743642850248_1943392842","id":"paragraph_1743642850248_1943392842","dateCreated":"2025-04-03T01:14:10+0000","status":"FINISHED","dateFinished":"2025-04-03T01:19:44+0000","dateStarted":"2025-04-03T01:19:44+0000","title":"Salvando Resultados","results":{"code":"SUCCESS","msg":[]},"focus":false},{"text":"%pyspark\n","user":"anonymous","dateUpdated":"2025-04-03T01:21:00+0000","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1743642910642_2126744500","id":"paragraph_1743642910642_2126744500","dateCreated":"2025-04-03T01:15:10+0000","status":"FINISHED","focus":false,"dateFinished":"2025-04-03T01:20:38+0000","dateStarted":"2025-04-03T01:20:37+0000","results":{"code":"SUCCESS","msg":[]}},{"text":"%pyspark\n","user":"anonymous","dateUpdated":"2025-04-03T01:20:37+0000","progress":0,"config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1743643237956_1338769071","id":"paragraph_1743643237956_1338769071","dateCreated":"2025-04-03T01:20:37+0000","status":"READY"}],"name":"02 - Spark SQL","id":"2KTCDTR1T","defaultInterpreterGroup":"spark","version":"0.12.0","noteParams":{},"noteForms":{},"angularObjects":{},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{},"path":"/02 - Spark SQL"}