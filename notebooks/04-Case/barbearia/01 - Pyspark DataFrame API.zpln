{"paragraphs":[{"title":"Configuração Inicial","text":"%pyspark\r\nfrom pyspark.sql import SparkSession\r\nfrom pyspark.sql.functions import *\r\nfrom pyspark.sql.types import *\r\n\r\n# Configuração do Spark\r\nspark = SparkSession.builder \\\r\n    .appName(\"Barbearia-Lab-PySpark\") \\\r\n    .getOrCreate()\r\n\r\n# Conexão com o PostgreSQL\r\ndb_url = \"jdbc:postgresql://postgres:5432/barbearia_db\"\r\nproperties = {\r\n    \"user\": \"admin\",\r\n    \"password\": \"senhasegura\",\r\n    \"driver\": \"org.postgresql.Driver\"\r\n}","user":"anonymous","dateUpdated":"2025-04-03T00:30:09+0000","progress":0,"config":{"colWidth":12,"fontSize":9,"title":true,"results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1743638748947_463804727","id":"paragraph_1743638748947_463804727","dateCreated":"2025-04-03T00:05:48+0000","dateStarted":"2025-04-03T00:09:51+0000","dateFinished":"2025-04-03T00:09:51+0000","status":"FINISHED","focus":false},{"title":"Configuração Inicial com MinIO","text":"%pyspark\n# 1. Configuração ESSENCIAL para MinIO\nfrom pyspark.sql import SparkSession\n\n# Encerrar qualquer sessão existente (importante!)\nspark.stop()\n\n# Criar nova sessão com todas as configurações necessárias\nspark = SparkSession.builder \\\n    .appName(\"MinIO-Access-Fix\") \\\n    .config(\"spark.hadoop.fs.s3a.endpoint\", \"http://minio:9000\") \\\n    .config(\"spark.hadoop.fs.s3a.access.key\", \"admin\") \\\n    .config(\"spark.hadoop.fs.s3a.secret.key\", \"senhasegura\") \\\n    .config(\"spark.hadoop.fs.s3a.path.style.access\", \"true\") \\\n    .config(\"spark.hadoop.fs.s3a.impl\", \"org.apache.hadoop.fs.s3a.S3AFileSystem\") \\\n    .config(\"spark.hadoop.fs.s3a.connection.ssl.enabled\", \"false\") \\\n    .config(\"spark.hadoop.fs.s3a.aws.credentials.provider\", \"org.apache.hadoop.fs.s3a.SimpleAWSCredentialsProvider\") \\\n    .config(\"spark.hadoop.fs.s3a.credentials.provider\", \"org.apache.hadoop.fs.s3a.SimpleAWSCredentialsProvider\") \\\n    .config(\"spark.hadoop.fs.s3a.impl.disable.cache\", \"true\") \\\n    .config(\"spark.jars.packages\", \"org.apache.hadoop:hadoop-aws:3.3.4,com.amazonaws:aws-java-sdk-bundle:1.12.262\") \\\n    .getOrCreate()\n\n# 2. Configuração adicional para garantir autenticação\nhadoop_conf = spark.sparkContext._jsc.hadoopConfiguration()\nhadoop_conf.set(\"fs.s3a.access.key\", \"admin\")\nhadoop_conf.set(\"fs.s3a.secret.key\", \"senhasegura\")\nhadoop_conf.set(\"fs.s3a.aws.credentials.provider\", \"org.apache.hadoop.fs.s3a.SimpleAWSCredentialsProvider\")\n\n# 3. Verificação EXTRA das configurações\nprint(\"\\nVerificação EXTRA das configurações:\")\nprint(\"Endpoint:\", hadoop_conf.get(\"fs.s3a.endpoint\"))\nprint(\"Access Key:\", hadoop_conf.get(\"fs.s3a.access.key\"))\nprint(\"Secret Key:\", hadoop_conf.get(\"fs.s3a.secret.key\"))\nprint(\"Credentials Provider:\", hadoop_conf.get(\"fs.s3a.aws.credentials.provider\"))\n\n# 4. Teste DIRETO via API Hadoop\ntry:\n    print(\"\\nTestando conexão via API Hadoop...\")\n    URI = spark.sparkContext._jvm.java.net.URI\n    Path = spark.sparkContext._jvm.org.apache.hadoop.fs.Path\n    FileSystem = spark.sparkContext._jvm.org.apache.hadoop.fs.FileSystem\n    \n    fs = FileSystem.get(URI.create(\"s3a://raw-bucket\"), hadoop_conf)\n    status = fs.listStatus(Path(\"/\"))\n    print(f\"\\nConexão bem-sucedida! Encontrados {len(status)} itens no bucket raiz\")\n    \n    # Leitura dos dados\n    print(\"\\nLendo dados específicos...\")\n    df = spark.read.parquet(\"s3a://raw-bucket/teste/\")\n    print(\"Leitura concluída com sucesso!\")\n    df.printSchema()\n    df.show()\n    \nexcept Exception as e:\n    print(\"\\nFalha na conexão:\")\n    print(\"Tipo:\", type(e))\n    print(\"Mensagem:\", str(e))\n    \n    # Diagnóstico avançado\n    print(\"\\nDIAGNÓSTICO AVANÇADO:\")\n    print(\"1. Execute no container Zeppelin: aws --endpoint-url http://minio:9000 s3 ls s3://raw-bucket/\")\n    print(\"2. Verifique os logs do MinIO: docker logs minio\")\n    print(\"3. Confira se o bucket existe: docker exec minio mc ls local/raw-bucket\")\n    print(\"4. Verifique as políticas: docker exec minio mc policy list local/raw-bucket\")\n    \n    raise e","user":"anonymous","dateUpdated":"2025-04-03T00:30:34+0000","progress":0,"config":{"colWidth":12,"fontSize":9,"title":true,"results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nVerificação EXTRA das configurações:\nEndpoint: http://minio:9000\nAccess Key: admin\nSecret Key: senhasegura\nCredentials Provider: org.apache.hadoop.fs.s3a.SimpleAWSCredentialsProvider\n\nTestando conexão via API Hadoop...\n\nConexão bem-sucedida! Encontrados 2 itens no bucket raiz\n\nLendo dados específicos...\nLeitura concluída com sucesso!\nroot\n |-- account_number: string (nullable = true)\n |-- bank_name: string (nullable = true)\n |-- dt_current_timestamp: long (nullable = true)\n |-- iban: string (nullable = true)\n |-- id: long (nullable = true)\n |-- routing_number: string (nullable = true)\n |-- swift_bic: string (nullable = true)\n |-- uid: string (nullable = true)\n |-- user_id: long (nullable = true)\n\n+--------------+--------------------+--------------------+--------------------+----+--------------+-----------+--------------------+-------+\n|account_number|           bank_name|dt_current_timestamp|                iban|  id|routing_number|  swift_bic|                 uid|user_id|\n+--------------+--------------------+--------------------+--------------------+----+--------------+-----------+--------------------+-------+\n|    9015971456|ABN AMRO HOARE GO...|       1619454557330|GB21HCRO995723481...| 102|     103784249|BOFAGB4TLTR|8bbe2f2f-0b7b-4a7...|   8823|\n|    7559729504|ABU DHABI ISLAMIC...|       1619454557330|GB47NWEK897640914...|7663|     329902119|   AACCGB21|a7a1851f-a157-443...|   1284|\n|    9579663831|UBS CLEARING AND ...|       1619454557330|GB12ALHQ962488106...|2147|     625893346|   AAPUGB21|09e2402e-5c1c-488...|   9552|\n|    0578673720|ABN AMRO HOARE GO...|       1619454557330|GB38NBTL207975050...|8583|     286940997|BCYPGB2LMBB|82fe6409-181c-469...|   8799|\n|    6708887811|ALKEN ASSET MANAG...|       1619454557330|GB54XHIZ270346356...|7228|     679071295|BCYPGB2LHHB|8bed0a03-c369-414...|   3454|\n|    2795238181|ABN AMRO MEZZANIN...|       1619454557330|GB55CMTT629664788...|7380|     307247760|MORLGB2LSMK|988dfc58-b96d-4c6...|   4565|\n|    1137843427|ABN AMRO FUND MAN...|       1619454557330|GB25YSNI496569157...|3782|     277060161|BOFAGB4TCDO|71a69da3-e483-451...|   2142|\n|    8250450354|ALKEN ASSET MANAG...|       1619454557330|GB30QDOY633593402...|2202|     322525195|BOFAGB22SCP|f4f3cce6-82bb-45b...|   3582|\n|    9865560796|ABINGWORTH MANAGE...|       1619454557330|GB15LBCS447063049...|4242|     034865415|   AAPUGB21|dd3270a3-ff59-46e...|   9641|\n|    5766297480|PGMS (GLASGOW) LI...|       1619454557330|GB54NPIC335689104...|9832|     091864200|   AANLGB2L|54155afd-968e-49b...|   6568|\n|    3974262091|ABINGWORTH MANAGE...|       1619454557330|GB34IGZA635891216...|7116|     120933345|   AACNGB21|15b3494a-8d1f-4f8...|   3129|\n|    3897227039|ABINGWORTH MANAGE...|       1619454557330|GB72LCNJ406237912...|1859|     709929916|BARBGB2LTOO|c3b97898-6f73-46b...|   7913|\n|    4092422598|ALKEN ASSET MANAG...|       1619454557330|GB33RKBE198084270...|1022|     307495101|BOFAGB4TCCD|478e7959-1d5b-48c...|   4098|\n|    1674970500|ABU DHABI ISLAMIC...|       1619454557330|GB71EHOM158027810...|3593|     041333134|ANTSGB2LXXX|75804674-5a6d-4b4...|   1619|\n|    9104595477|ALKEN ASSET MANAG...|       1619454557330|GB51XGFG417772208...|8857|     290023499|UBKLGB2LBAK|1827ed12-00db-436...|   9952|\n|    7510317426|PGMS (GLASGOW) LI...|       1619454557330|GB66CPIM115561879...| 901|     102146875|   ABMNGB21|ab20010b-cdc6-4f7...|    974|\n|    9931245766|ABN AMRO HOARE GO...|       1619454557330|GB38IMNA693376813...|3231|     238547843|   AAHOGB21|20379503-0da7-4b3...|   6606|\n|    5180818381|OTKRITIE SECURITI...|       1619454557330|GB70VBSF279305509...|6324|     306411953|BSABGB2LXXX|a11c79cb-91d4-40d...|   2229|\n|    1132279966|ABN AMRO FUND MAN...|       1619454557330|GB12IHFO221984994...|6245|     265653739|AKBKGB22XXX|06e4f51a-9e40-4fe...|   6412|\n|    4018916349|AAC CAPITAL PARTN...|       1619454557330|GB94WHWZ748658939...|1500|     707133050|BCYPGB2LXXX|6b64ff35-734e-4e0...|   4080|\n+--------------+--------------------+--------------------+--------------------+----+--------------+-----------+--------------------+-------+\nonly showing top 20 rows\n\n"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1743640200468_659428641","id":"paragraph_1743640200468_659428641","dateCreated":"2025-04-03T00:30:00+0000","dateStarted":"2025-04-03T00:30:34+0000","dateFinished":"2025-04-03T00:30:36+0000","status":"FINISHED"},{"title":"Carregando dados do PostgreSQL","text":"%pyspark\n# Carregando tabelas\ndf_clientes = spark.read.jdbc(url=db_url, table=\"cliente\", properties=properties)\ndf_profissionais = spark.read.jdbc(url=db_url, table=\"profissional\", properties=properties)\ndf_agendamentos = spark.read.jdbc(url=db_url, table=\"agendamento\", properties=properties)\ndf_servicos = spark.read.jdbc(url=db_url, table=\"servico\", properties=properties)\ndf_pagamentos = spark.read.jdbc(url=db_url, table=\"pagamento\", properties=properties)\n\n# 1. Explorando a estrutura\nprint(\"=== Estrutura do DataFrame de Clientes ===\")\ndf_clientes.printSchema()\nprint(\"\\nColunas:\", df_clientes.columns)\nprint(\"\\nTipos de dados:\", df_clientes.dtypes)\n\n# 2. Visualizando dados\nprint(\"\\nPrimeiras 5 linhas:\")\ndf_clientes.show(5)\n\nprint(\"\\nEstatísticas descritivas:\")\ndf_clientes.describe().show()\n\n# 3. Seleção de colunas\nprint(\"\\nSelecionando colunas específicas:\")\ndf_clientes.select(\n    col(\"cliente_id\").alias(\"id\"),\n    \"nome\",\n    \"telefone\"\n).show(5)","user":"anonymous","dateUpdated":"2025-04-03T00:30:43+0000","progress":0,"config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"=== Estrutura do DataFrame de Clientes ===\nroot\n |-- cliente_id: integer (nullable = true)\n |-- nome: string (nullable = true)\n |-- telefone: string (nullable = true)\n |-- email: string (nullable = true)\n |-- data_nascimento: date (nullable = true)\n |-- data_cadastro: timestamp (nullable = true)\n |-- observacoes: string (nullable = true)\n |-- ativo: boolean (nullable = true)\n\n\nColunas: ['cliente_id', 'nome', 'telefone', 'email', 'data_nascimento', 'data_cadastro', 'observacoes', 'ativo']\n\nTipos de dados: [('cliente_id', 'int'), ('nome', 'string'), ('telefone', 'string'), ('email', 'string'), ('data_nascimento', 'date'), ('data_cadastro', 'timestamp'), ('observacoes', 'string'), ('ativo', 'boolean')]\n\nPrimeiras 5 linhas:\n+----------+--------------------+-------------+--------------------+---------------+--------------------+-----------+-----+\n|cliente_id|                nome|     telefone|               email|data_nascimento|       data_cadastro|observacoes|ativo|\n+----------+--------------------+-------------+--------------------+---------------+--------------------+-----------+-----+\n|      1023|  Prof. Liam Martins|(11) 941-7035|prof. liam.martin...|     2000-04-16|2021-08-05 19:37:...|       null| true|\n|      1024|Guilherme Rodrigu...|(11) 951-5355|guilherme.rodrigu...|     1947-08-16|2021-10-02 19:37:...|       null| true|\n|      1025|João Pedro Costel...|(11) 969-5361|joão pedro.costel...|     1947-06-03|2024-11-01 19:37:...|       null| true|\n|      1026|Isaque Pereira Si...|(11) 950-3473|isaque.pereira si...|     1997-12-18|2024-03-22 19:37:...|       null| true|\n|      1027|      Danilo Sampaio|(11) 953-2267|danilo.sampaio59@...|     1999-12-03|2022-08-22 19:37:...|       null| true|\n+----------+--------------------+-------------+--------------------+---------------+--------------------+-----------+-----+\nonly showing top 5 rows\n\n\nEstatísticas descritivas:\n+-------+------------------+--------------------+-------------+--------------------+--------------------+\n|summary|        cliente_id|                nome|     telefone|               email|         observacoes|\n+-------+------------------+--------------------+-------------+--------------------+--------------------+\n|  count|               500|                 500|          500|                 500|                 120|\n|   mean|            1250.5|                null|         null|                null|                null|\n| stddev|144.48183276799847|                null|         null|                null|                null|\n|    min|              1001|Agatha Marques Ca...|(11) 910-3170|agatha.marques ca...|Alérgico a produt...|\n|    max|              1500|          Ísis Porto|(11) 999-8016|ísis.porto@hotmai...|Tem preferência p...|\n+-------+------------------+--------------------+-------------+--------------------+--------------------+\n\n\nSelecionando colunas específicas:\n+----+--------------------+-------------+\n|  id|                nome|     telefone|\n+----+--------------------+-------------+\n|1023|  Prof. Liam Martins|(11) 941-7035|\n|1024|Guilherme Rodrigu...|(11) 951-5355|\n|1025|João Pedro Costel...|(11) 969-5361|\n|1026|Isaque Pereira Si...|(11) 950-3473|\n|1027|      Danilo Sampaio|(11) 953-2267|\n+----+--------------------+-------------+\nonly showing top 5 rows\n\n"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1743638795539_77814579","id":"paragraph_1743638795539_77814579","dateCreated":"2025-04-03T00:06:35+0000","dateStarted":"2025-04-03T00:30:43+0000","dateFinished":"2025-04-03T00:30:44+0000","status":"FINISHED"},{"title":"Transformações em DataFrames","text":"%pyspark\n# 1. Criando nova coluna\ndf_clientes = df_clientes.withColumn(\n    \"nome_upper\", upper(col(\"nome\"))\n)\n\n# 2. Filtrando dados\nprint(\"\\nClientes ativos:\")\ndf_clientes.filter(col(\"ativo\") == True).show(5)\n\n# 3. Coluna condicional\ndf_clientes = df_clientes.withColumn(\n    \"faixa_etaria\",\n    when(datediff(current_date(), col(\"data_nascimento\"))/365 < 30, \"Jovem\")\n    .when(datediff(current_date(), col(\"data_nascimento\"))/365 < 50, \"Adulto\")\n    .otherwise(\"Senior\")\n)\n\n# 4. Removendo coluna\ndf_clientes = df_clientes.drop(\"nome_upper\")\n\n# Mostrando resultados\ndf_clientes.select(\"cliente_id\", \"nome\", \"faixa_etaria\").show(10)","user":"anonymous","dateUpdated":"2025-04-03T00:11:04+0000","progress":0,"config":{"colWidth":12,"fontSize":9,"title":true,"results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nClientes ativos:\n+----------+--------------------+-------------+--------------------+---------------+--------------------+-----------+-----+--------------------+\n|cliente_id|                nome|     telefone|               email|data_nascimento|       data_cadastro|observacoes|ativo|          nome_upper|\n+----------+--------------------+-------------+--------------------+---------------+--------------------+-----------+-----+--------------------+\n|      1023|  Prof. Liam Martins|(11) 941-7035|prof. liam.martin...|     2000-04-16|2021-08-05 19:37:...|       null| true|  PROF. LIAM MARTINS|\n|      1024|Guilherme Rodrigu...|(11) 951-5355|guilherme.rodrigu...|     1947-08-16|2021-10-02 19:37:...|       null| true|GUILHERME RODRIGU...|\n|      1025|João Pedro Costel...|(11) 969-5361|joão pedro.costel...|     1947-06-03|2024-11-01 19:37:...|       null| true|JOÃO PEDRO COSTEL...|\n|      1026|Isaque Pereira Si...|(11) 950-3473|isaque.pereira si...|     1997-12-18|2024-03-22 19:37:...|       null| true|ISAQUE PEREIRA SI...|\n|      1027|      Danilo Sampaio|(11) 953-2267|danilo.sampaio59@...|     1999-12-03|2022-08-22 19:37:...|       null| true|      DANILO SAMPAIO|\n+----------+--------------------+-------------+--------------------+---------------+--------------------+-----------+-----+--------------------+\nonly showing top 5 rows\n\n+----------+--------------------+------------+\n|cliente_id|                nome|faixa_etaria|\n+----------+--------------------+------------+\n|      1023|  Prof. Liam Martins|       Jovem|\n|      1024|Guilherme Rodrigu...|      Senior|\n|      1025|João Pedro Costel...|      Senior|\n|      1026|Isaque Pereira Si...|       Jovem|\n|      1027|      Danilo Sampaio|       Jovem|\n|      1028|           Rael Leão|      Senior|\n|      1029|        João Cardoso|      Senior|\n|      1030|    Matheus Ferreira|      Adulto|\n|      1031|Luiz Otávio Silva...|       Jovem|\n|      1032|  Rael Aragão Araújo|      Senior|\n+----------+--------------------+------------+\nonly showing top 10 rows\n\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://eb39661225a3:4040/jobs/job?id=5"},{"jobUrl":"http://eb39661225a3:4040/jobs/job?id=6"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1743638844556_1990735631","id":"paragraph_1743638844556_1990735631","dateCreated":"2025-04-03T00:07:24+0000","dateStarted":"2025-04-03T00:11:04+0000","dateFinished":"2025-04-03T00:11:04+0000","status":"FINISHED"},{"title":"Agregações e Agrupamentos","text":"%pyspark\n# 1. Agregações básicas\nprint(\"\\nTotal de agendamentos por status:\")\ndf_agendamentos.groupBy(\"status\").count().show()\n\n# 2. Agregações múltiplas\nprint(\"\\nEstatísticas de pagamentos:\")\ndf_pagamentos.groupBy(\"forma_pagamento\").agg(\n    count(\"*\").alias(\"total\"),\n    avg(\"valor_total\").alias(\"media_valor\"),\n    sum(\"valor_total\").alias(\"valor_total\")\n).show()\n\n# 3. Ordenação\nprint(\"\\nServiços mais caros:\")\ndf_servicos.orderBy(col(\"preco\").desc()).show()\n\n# 4. Valores distintos\nprint(\"\\nFormas de pagamento distintas:\")\ndf_pagamentos.select(\"forma_pagamento\").distinct().show()","user":"anonymous","dateUpdated":"2025-04-03T00:11:42+0000","progress":0,"config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nTotal de agendamentos por status:\n+----------+-----+\n|    status|count|\n+----------+-----+\n| cancelado|   33|\n| concluido|   84|\n|confirmado|  447|\n+----------+-----+\n\n\nEstatísticas de pagamentos:\n+---------------+-----+-----------+-----------+\n|forma_pagamento|total|media_valor|valor_total|\n+---------------+-----+-----------+-----------+\n| cartao_credito|  128|  74.644531|    9554.50|\n|       dinheiro|  151|  65.642384|    9912.00|\n|  cartao_debito|  125|  63.992000|    7999.00|\n|            pix|  127|  67.452756|    8566.50|\n+---------------+-----+-----------+-----------+\n\n\nServiços mais caros:\n+----------+--------------------+--------------------+----------------+------+-----+\n|servico_id|                nome|           descricao|duracao_estimada| preco|ativo|\n+----------+--------------------+--------------------+----------------+------+-----+\n|        14|         Progressiva|Alisamento com fo...|              90|150.00| true|\n|        19|     Pacote Completo|Corte, barba e hi...|              90|140.00| true|\n|        16|               Luzes|Mechas para efeit...|              75|120.00| true|\n|        20|         Relaxamento|Tratamento para a...|              60|110.00| true|\n|        15|           Coloração| Tingimento dos fios|              60|100.00| true|\n|        18|Pacote Corte + Barba|Corte completo ma...|              60| 85.00| true|\n|        13|  Hidratação Capilar|Tratamento para r...|              40| 80.00| true|\n|         7|       Corte Moicano|Estilo ousado com...|              50| 70.00| true|\n|         5|     Corte Pompadour|Estilo clássico c...|              45| 65.00| true|\n|         6|      Corte Undercut|Lados raspados co...|              40| 60.00| true|\n|         8|          Corte Afro|Manutenção de cab...|              45| 60.00| true|\n|         2|       Corte Degradê|Corte com transiç...|              40| 55.00| true|\n|         1|        Corte Social|Corte tradicional...|              30| 45.00| true|\n|        10|   Barba com Navalha|Aparação com nava...|              35| 45.00| true|\n|         4|      Corte Infantil|Corte especial pa...|              35| 40.00| true|\n|         9|      Barba Completa|Aparação e modela...|              30| 40.00| true|\n|         3|       Corte Militar|Corte curto e uni...|              25| 35.00| true|\n|        17|    Massagem Capilar|Massagem relaxant...|              20| 30.00| true|\n|        12|        Pé de Cabelo|Acerto nas latera...|              20| 25.00| true|\n|        11|         Sobrancelha|Design e manutenç...|              15| 20.00| true|\n+----------+--------------------+--------------------+----------------+------+-----+\n\n\nFormas de pagamento distintas:\n+---------------+\n|forma_pagamento|\n+---------------+\n| cartao_credito|\n|       dinheiro|\n|  cartao_debito|\n|            pix|\n+---------------+\n\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://eb39661225a3:4040/jobs/job?id=7"},{"jobUrl":"http://eb39661225a3:4040/jobs/job?id=8"},{"jobUrl":"http://eb39661225a3:4040/jobs/job?id=9"},{"jobUrl":"http://eb39661225a3:4040/jobs/job?id=10"},{"jobUrl":"http://eb39661225a3:4040/jobs/job?id=11"},{"jobUrl":"http://eb39661225a3:4040/jobs/job?id=12"},{"jobUrl":"http://eb39661225a3:4040/jobs/job?id=13"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1743638953476_1647756379","id":"paragraph_1743638953476_1647756379","dateCreated":"2025-04-03T00:09:13+0000","dateStarted":"2025-04-03T00:11:42+0000","dateFinished":"2025-04-03T00:11:43+0000","status":"FINISHED"},{"title":"Joins entre DataFrames","text":"%pyspark\n# 1. Inner Join\nprint(\"\\nAgendamentos com detalhes completos:\")\ndf_completo = df_agendamentos.join(\n    df_clientes,\n    df_agendamentos.cliente_id == df_clientes.cliente_id,\n    \"inner\"\n).join(\n    df_profissionais,\n    df_agendamentos.profissional_id == df_profissionais.profissional_id,\n    \"inner\"\n).join(\n    df_servicos,\n    df_agendamentos.servico_id == df_servicos.servico_id,\n    \"inner\"\n)\n\ndf_completo.select(\n    df_clientes.nome.alias(\"cliente\"),\n    df_profissionais.nome.alias(\"profissional\"),\n    df_servicos.nome.alias(\"servico\"),\n    \"data_hora\",\n    \"status\"\n).show(10)\n\n# 2. Left Join\nprint(\"\\nTodos os profissionais e seus agendamentos:\")\ndf_profissionais.join(\n    df_agendamentos,\n    df_profissionais.profissional_id == df_agendamentos.profissional_id,\n    \"left\"\n).groupBy(\n    df_profissionais.nome\n).agg(\n    count(df_agendamentos.agendamento_id).alias(\"total_agendamentos\")\n).orderBy(\n    col(\"total_agendamentos\").desc()\n).show()","user":"anonymous","dateUpdated":"2025-04-03T00:12:35+0000","progress":0,"config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nAgendamentos com detalhes completos:\n+------------------+----------------+------------+-------------------+----------+\n|           cliente|    profissional|     servico|          data_hora|    status|\n+------------------+----------------+------------+-------------------+----------+\n|Eduarda Cavalcante|      João Silva|Corte Social|2024-01-02 10:30:00|confirmado|\n|         Noah Rios|      João Silva|Corte Social|2024-01-02 09:30:00| concluido|\n|      Thomas Porto|      João Silva|Corte Social|2024-01-02 10:00:00|confirmado|\n|       Luan Duarte| Carlos Oliveira|Corte Social|2024-01-03 09:45:00|confirmado|\n|José Pedro da Cruz|Ricardo Ferreira|Corte Social|2017-01-02 16:45:00|confirmado|\n|        Rael Abreu|   Pedro Almeida|Corte Social|2024-01-03 13:30:00|confirmado|\n| Theo Alves Mendes|   Pedro Almeida|Corte Social|2024-01-03 13:00:00|confirmado|\n|      Theo Pimenta|   Pedro Almeida|Corte Social|2025-01-02 12:15:00|confirmado|\n| Rael da Conceição|   Pedro Almeida|Corte Social|2024-01-03 13:15:00|confirmado|\n| Oliver Montenegro|    Lucas Mendes|Corte Social|2020-01-03 11:00:00| cancelado|\n+------------------+----------------+------------+-------------------+----------+\nonly showing top 10 rows\n\n\nTodos os profissionais e seus agendamentos:\n+----------------+------------------+\n|            nome|total_agendamentos|\n+----------------+------------------+\n|   Pedro Almeida|                70|\n|      João Silva|                70|\n|   Marcos Santos|                68|\n|   Eduardo Rocha|                68|\n|    Gustavo Lima|                67|\n|  Fernando Costa|                63|\n|    Daniel Souza|                37|\n|    Lucas Mendes|                36|\n| Carlos Oliveira|                35|\n| Antônio Barbosa|                31|\n|Ricardo Ferreira|                10|\n|   Roberto Nunes|                 9|\n+----------------+------------------+\n\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://eb39661225a3:4040/jobs/job?id=14"},{"jobUrl":"http://eb39661225a3:4040/jobs/job?id=15"},{"jobUrl":"http://eb39661225a3:4040/jobs/job?id=16"},{"jobUrl":"http://eb39661225a3:4040/jobs/job?id=17"},{"jobUrl":"http://eb39661225a3:4040/jobs/job?id=19"},{"jobUrl":"http://eb39661225a3:4040/jobs/job?id=20"},{"jobUrl":"http://eb39661225a3:4040/jobs/job?id=21"},{"jobUrl":"http://eb39661225a3:4040/jobs/job?id=22"},{"jobUrl":"http://eb39661225a3:4040/jobs/job?id=23"},{"jobUrl":"http://eb39661225a3:4040/jobs/job?id=25"},{"jobUrl":"http://eb39661225a3:4040/jobs/job?id=26"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1743639102182_921141155","id":"paragraph_1743639102182_921141155","dateCreated":"2025-04-03T00:11:42+0000","dateStarted":"2025-04-03T00:12:35+0000","dateFinished":"2025-04-03T00:12:36+0000","status":"FINISHED"},{"title":"Trabalhando com Datas e Horários","text":"%pyspark\n# 1. Convertendo e extraindo datas\nprint(\"\\nAgendamentos por mês:\")\ndf_agendamentos.withColumn(\n    \"data_agendamento\", to_date(col(\"data_hora\"))\n).withColumn(\n    \"mes\", month(col(\"data_hora\"))\n).withColumn(\n    \"ano\", year(col(\"data_hora\"))\n).groupBy(\n    \"ano\", \"mes\"\n).count().orderBy(\n    \"ano\", \"mes\"\n).show()\n\n# 2. Diferença entre datas\nprint(\"\\nTempo desde o cadastro do cliente:\")\ndf_clientes.withColumn(\n    \"dias_cadastrado\", \n    datediff(current_date(), col(\"data_cadastro\"))\n).select(\n    \"nome\", \"data_cadastro\", \"dias_cadastrado\"\n).show(10)","user":"anonymous","dateUpdated":"2025-04-03T00:12:57+0000","progress":0,"config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nAgendamentos por mês:\n+----+---+-----+\n| ano|mes|count|\n+----+---+-----+\n|2017|  1|   28|\n|2018|  1|   86|\n|2020|  1|   85|\n|2020|  3|    1|\n|2024|  1|  276|\n|2024|  6|    2|\n|2025|  1|   86|\n+----+---+-----+\n\n\nTempo desde o cadastro do cliente:\n+--------------------+--------------------+---------------+\n|                nome|       data_cadastro|dias_cadastrado|\n+--------------------+--------------------+---------------+\n|  Prof. Liam Martins|2021-08-05 19:37:...|           1337|\n|Guilherme Rodrigu...|2021-10-02 19:37:...|           1279|\n|João Pedro Costel...|2024-11-01 19:37:...|            153|\n|Isaque Pereira Si...|2024-03-22 19:37:...|            377|\n|      Danilo Sampaio|2022-08-22 19:37:...|            955|\n|           Rael Leão|2022-02-14 19:37:...|           1144|\n|        João Cardoso|2022-07-12 19:37:...|            996|\n|    Matheus Ferreira|2021-06-07 19:37:...|           1396|\n|Luiz Otávio Silva...|2020-08-17 19:37:...|           1690|\n|  Rael Aragão Araújo|2021-12-01 19:37:...|           1219|\n+--------------------+--------------------+---------------+\nonly showing top 10 rows\n\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://eb39661225a3:4040/jobs/job?id=27"},{"jobUrl":"http://eb39661225a3:4040/jobs/job?id=28"},{"jobUrl":"http://eb39661225a3:4040/jobs/job?id=29"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1743639155668_1780944462","id":"paragraph_1743639155668_1780944462","dateCreated":"2025-04-03T00:12:35+0000","dateStarted":"2025-04-03T00:12:57+0000","dateFinished":"2025-04-03T00:12:58+0000","status":"FINISHED"},{"title":"Salvando DataFrames","text":"%pyspark\n# 1. Salvando em CSV\ndf_clientes.write \\\n    .mode(\"overwrite\") \\\n    .csv(\"clientes_barbearia.csv\", header=True)","user":"anonymous","dateUpdated":"2025-04-03T00:15:59+0000","progress":0,"config":{"colWidth":12,"fontSize":9,"title":true,"results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://eb39661225a3:4040/jobs/job?id=38"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1743639177757_990529112","id":"paragraph_1743639177757_990529112","dateCreated":"2025-04-03T00:12:57+0000","dateStarted":"2025-04-03T00:15:59+0000","dateFinished":"2025-04-03T00:15:59+0000","status":"FINISHED"},{"title":"Escrevendo no PostgreSQL","text":"%pyspark\n# Processamento: agendamentos por profissional\ndf_agendamentos_por_profissional = df_agendamentos.groupBy(\"profissional_id\") \\\n    .agg(count(\"*\").alias(\"total_agendamentos\"),\n         avg(\"duracao\").alias(\"duracao_media\"))\n\n# Escrever resultado em nova tabela\n(\n    df_agendamentos_por_profissional.write\n    .format(\"jdbc\") \n    .option(\"url\", \"jdbc:postgresql://postgres:5432/barbearia_db\") \n    .option(\"dbtable\", \"estatisticas_profissionais\") \n    .option(\"user\", \"admin\") \n    #.option(\"truncate\", \"true\")\n    .option(\"password\", \"senhasegura\") \n    .mode(\"overwrite\") \n    .save()\n)\nprint(\"Dados gravados com sucesso na tabela estatisticas_profissionais!\")","user":"anonymous","dateUpdated":"2025-04-03T00:22:24+0000","progress":0,"config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Dados gravados com sucesso na tabela estatisticas_profissionais!\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://eb39661225a3:4040/jobs/job?id=43"},{"jobUrl":"http://eb39661225a3:4040/jobs/job?id=44"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1743639318124_1494134400","id":"paragraph_1743639318124_1494134400","dateCreated":"2025-04-03T00:15:18+0000","dateStarted":"2025-04-03T00:21:09+0000","dateFinished":"2025-04-03T00:21:10+0000","status":"FINISHED"},{"title":"Lendo dados do PostgreSQL com consultas SQL no PySpark","text":"%pyspark\n# Consulta SQL\nconsulta_sql = \"\"\"\n    SELECT c.nome AS cliente, p.nome AS profissional, s.nome AS servico, \n           a.data_hora, a.status, pg.valor_total, pg.forma_pagamento\n    FROM agendamento a\n    JOIN cliente c ON a.cliente_id = c.cliente_id\n    JOIN profissional p ON a.profissional_id = p.profissional_id\n    JOIN servico s ON a.servico_id = s.servico_id\n    LEFT JOIN pagamento pg ON a.agendamento_id = pg.agendamento_id\n    WHERE a.data_hora BETWEEN '2024-01-01' AND '2024-12-31'\n    AND c.ativo = TRUE\n\"\"\"\n\n# Lendo os dados com a consulta\ndf_resultado = spark.read \\\n    .format(\"jdbc\") \\\n    .option(\"url\", db_url) \\\n    .option(\"query\", consulta_sql) \\\n    .option(\"user\", properties[\"user\"]) \\\n    .option(\"password\", properties[\"password\"]) \\\n    .load()\n\ndf_resultado.show(10)","user":"anonymous","dateUpdated":"2025-04-03T00:24:46+0000","progress":0,"config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------------------+--------------+------------------+-------------------+----------+-----------+---------------+\n|             cliente|  profissional|           servico|          data_hora|    status|valor_total|forma_pagamento|\n+--------------------+--------------+------------------+-------------------+----------+-----------+---------------+\n|        Calebe Porto|Fernando Costa| Barba com Navalha|2024-01-02 13:00:00|confirmado|      45.00|            pix|\n| Ana Julia das Neves| Pedro Almeida|Hidratação Capilar|2024-01-02 12:30:00|confirmado|      80.00|            pix|\n|Guilherme Pimenta...| Marcos Santos|        Corte Afro|2024-01-02 16:45:00| concluido|      60.00|       dinheiro|\n|  José Pedro da Cruz|  Gustavo Lima|      Corte Social|2024-01-02 13:45:00| concluido|      40.50| cartao_credito|\n|         Daniel Lima|  Gustavo Lima|        Corte Afro|2024-01-02 11:30:00|confirmado|      60.00|  cartao_debito|\n|Luiz Henrique Sam...| Pedro Almeida|     Corte Moicano|2024-01-02 10:15:00|confirmado|      70.00|  cartao_debito|\n|         Gael Garcia|Fernando Costa|        Corte Afro|2024-01-02 15:30:00|confirmado|      60.00| cartao_credito|\n|Vitor Gabriel Mac...|    João Silva| Barba com Navalha|2024-01-02 11:15:00| concluido|      45.00|            pix|\n|  Maria Clara Novaes|Fernando Costa|       Progressiva|2024-01-02 15:45:00|confirmado|     150.00| cartao_credito|\n|Maria Cecília da ...| Pedro Almeida|Hidratação Capilar|2024-01-02 12:15:00|confirmado|      80.00| cartao_credito|\n+--------------------+--------------+------------------+-------------------+----------+-----------+---------------+\nonly showing top 10 rows\n\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://eb39661225a3:4040/jobs/job?id=45"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1743639561412_422351824","id":"paragraph_1743639561412_422351824","dateCreated":"2025-04-03T00:19:21+0000","dateStarted":"2025-04-03T00:24:23+0000","dateFinished":"2025-04-03T00:24:24+0000","status":"FINISHED"},{"text":"%pyspark\ndf = (\n    spark\n    .read \n    .format(\"jdbc\") \n    .option(\"url\", db_url) \n    .option(\"query\", \"SELECT * FROM agendamento\") \n    .option(\"user\", properties[\"user\"]) \n    .option(\"password\", properties[\"password\"]) \n    .load()\n)\n\ndf.show()","user":"anonymous","dateUpdated":"2025-04-03T00:27:29+0000","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------------+----------+---------------+----------+-------------------+-------+----------+-----------+--------------------+--------------------+\n|agendamento_id|cliente_id|profissional_id|servico_id|          data_hora|duracao|    status|observacoes|        data_criacao|    data_atualizacao|\n+--------------+----------+---------------+----------+-------------------+-------+----------+-----------+--------------------+--------------------+\n|             2|      1402|              3|         3|2025-01-01 10:45:00|     25|confirmado|       null|2025-04-02 22:55:...|2025-04-02 22:55:...|\n|             3|      1421|              2|        17|2025-01-01 09:45:00|     20|confirmado|       null|2025-04-02 22:55:...|2025-04-02 22:55:...|\n|             4|      1134|             10|        14|2025-01-01 12:30:00|     90|confirmado|       null|2025-04-02 22:55:...|2025-04-02 22:55:...|\n|             5|      1242|              2|         5|2025-01-01 11:00:00|     45| concluido|       null|2025-04-02 22:55:...|2025-04-02 22:55:...|\n|             6|      1318|              5|        11|2025-01-01 15:45:00|     15|confirmado|       null|2025-04-02 22:55:...|2025-04-02 22:55:...|\n|             7|      1407|              1|        12|2025-01-01 15:15:00|     20| cancelado|       null|2025-04-02 22:55:...|2025-04-02 22:55:...|\n|             8|      1204|              5|         2|2025-01-01 15:30:00|     40|confirmado|       null|2025-04-02 22:55:...|2025-04-02 22:55:...|\n|             9|      1360|              9|        19|2025-01-01 13:15:00|     90| cancelado|       null|2025-04-02 22:55:...|2025-04-02 22:55:...|\n|            10|      1360|              7|         2|2025-01-01 11:30:00|     40|confirmado|       null|2025-04-02 22:55:...|2025-04-02 22:55:...|\n|            11|      1454|              6|        18|2025-01-01 12:00:00|     60|confirmado|       null|2025-04-02 22:55:...|2025-04-02 22:55:...|\n|            12|      1466|              1|         8|2025-01-01 15:45:00|     45|confirmado|       null|2025-04-02 22:55:...|2025-04-02 22:55:...|\n|            13|      1337|              2|        12|2025-01-01 09:00:00|     20|confirmado|       null|2025-04-02 22:55:...|2025-04-02 22:55:...|\n|            14|      1064|              3|        19|2025-01-01 10:15:00|     90|confirmado|       null|2025-04-02 22:55:...|2025-04-02 22:55:...|\n|            15|      1271|              3|        10|2025-01-01 11:45:00|     35| cancelado|       null|2025-04-02 22:55:...|2025-04-02 22:55:...|\n|            16|      1370|              1|         6|2025-01-01 14:00:00|     40|confirmado|       null|2025-04-02 22:55:...|2025-04-02 22:55:...|\n|            17|      1041|             11|         9|2025-01-01 11:15:00|     30|confirmado|       null|2025-04-02 22:55:...|2025-04-02 22:55:...|\n|            18|      1029|              7|         9|2025-01-01 10:30:00|     30|confirmado|       null|2025-04-02 22:55:...|2025-04-02 22:55:...|\n|            19|      1281|              9|         1|2025-01-01 13:00:00|     30|confirmado|       null|2025-04-02 22:55:...|2025-04-02 22:55:...|\n|            20|      1346|              5|         6|2025-01-01 15:15:00|     40| concluido|       null|2025-04-02 22:55:...|2025-04-02 22:55:...|\n|            21|      1457|              9|         6|2025-01-01 14:30:00|     40|confirmado|       null|2025-04-02 22:55:...|2025-04-02 22:55:...|\n+--------------+----------+---------------+----------+-------------------+-------+----------+-----------+--------------------+--------------------+\nonly showing top 20 rows\n\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://eb39661225a3:4040/jobs/job?id=47"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1743639863669_681987388","id":"paragraph_1743639863669_681987388","dateCreated":"2025-04-03T00:24:23+0000","dateStarted":"2025-04-03T00:27:29+0000","dateFinished":"2025-04-03T00:27:29+0000","status":"FINISHED"},{"title":"Salvando no MinIO","text":"%pyspark\n# Ler dados do PostgreSQL\ndf_agendamentos = spark.read \\\n    .format(\"jdbc\") \\\n    .option(\"url\", \"jdbc:postgresql://postgres:5432/barbearia_db\") \\\n    .option(\"dbtable\", \"agendamento\") \\\n    .option(\"user\", \"admin\") \\\n    .option(\"password\", \"senhasegura\") \\\n    .load()\n\n# Processar dados - agendamentos por mês\ndf_agendamentos_mes = df_agendamentos.withColumn(\"mes\", month(col(\"data_hora\"))) \\\n    .groupBy(\"mes\") \\\n    .agg(count(\"*\").alias(\"total_agendamentos\"))\n\n# Escrever no MinIO em formato Parquet\ndf_agendamentos_mes.write \\\n    .format(\"parquet\") \\\n    .mode(\"overwrite\") \\\n    .save(\"s3a://raw-bucket/barbearia/analytics/agendamentos_por_mes/\")\n\nprint(\"Dados salvos com sucesso no MinIO!\")","user":"anonymous","dateUpdated":"2025-04-03T00:33:24+0000","progress":0,"config":{"colWidth":12,"fontSize":9,"title":true,"results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Dados salvos com sucesso no MinIO!\n"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1743639987988_700079336","id":"paragraph_1743639987988_700079336","dateCreated":"2025-04-03T00:26:27+0000","dateStarted":"2025-04-03T00:33:24+0000","dateFinished":"2025-04-03T00:33:26+0000","status":"FINISHED"},{"title":"Particionando os agendamentos por ano e mês","text":"%pyspark\n# Ler dados da tabela de agendamentos\ndf_agendamentos = spark.read \\\n    .format(\"jdbc\") \\\n    .option(\"url\", \"jdbc:postgresql://postgres:5432/barbearia_db\") \\\n    .option(\"dbtable\", \"agendamento\") \\\n    .option(\"user\", \"admin\") \\\n    .option(\"password\", \"senhasegura\") \\\n    .load()\n\n# Adicionar colunas de partição (ano e mês)\ndf_agendamentos_part = df_agendamentos.withColumn(\"ano\", year(\"data_hora\")).withColumn(\"mes\", month(\"data_hora\"))\n\n# Escrever no MinIO com particionamento\ndf_agendamentos_part.write \\\n    .format(\"parquet\") \\\n    .partitionBy(\"ano\", \"mes\") \\\n    .mode(\"overwrite\") \\\n    .save(\"s3a://raw-bucket/barbearia/analytics/agendamentos/\")\n\nprint(\"Dados salvos com particionamento no MinIO!\")","user":"anonymous","dateUpdated":"2025-04-03T00:36:23+0000","progress":0,"config":{"colWidth":12,"fontSize":9,"title":true,"results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Dados salvos com particionamento no MinIO!\n"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1743640332132_1313625512","id":"paragraph_1743640332132_1313625512","dateCreated":"2025-04-03T00:32:12+0000","dateStarted":"2025-04-03T00:36:23+0000","dateFinished":"2025-04-03T00:36:29+0000","status":"FINISHED"},{"text":"%pyspark\n","user":"anonymous","dateUpdated":"2025-04-03T00:36:23+0000","progress":0,"config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1743640583437_698102422","id":"paragraph_1743640583437_698102422","dateCreated":"2025-04-03T00:36:23+0000","status":"READY"}],"name":"01 - Pyspark DataFrame API","id":"2KR333PEB","defaultInterpreterGroup":"spark","version":"0.12.0","noteParams":{},"noteForms":{},"angularObjects":{},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{},"path":"/01 - Pyspark DataFrame API"}